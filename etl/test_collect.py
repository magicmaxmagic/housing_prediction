#!/usr/bin/env python3
"""
Test script pour collect_areas_demography.py
"""

import sys
from pathlib import Path
import logging
import requests
import pandas as pd
import geopandas as gpd
import pyogrio

# Ajouter le r√©pertoire parent au path pour importer notre module
sys.path.append(str(Path(__file__).parent))

try:
    from collect_areas_demography import setup_directories, download_file, DATA_SOURCES
    print("‚úÖ Import du module r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def test_dependencies():
    """Tester que toutes les d√©pendances sont disponibles."""
    try:
        
        print("‚úÖ Toutes les d√©pendances sont disponibles")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        return False

def test_setup():
    """Tester la cr√©ation des r√©pertoires."""
    try:
        output_dir = setup_directories()
        print(f"‚úÖ R√©pertoire cr√©√©: {output_dir}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur setup: {e}")
        return False

def test_download():
    """Tester la validation des URLs."""
    try:
        # Test simple : v√©rifier que les URLs sont bien form√©es
        from collect_areas_demography import DATA_SOURCES
        urls = list(DATA_SOURCES.values())
        for url in urls:
            if url.startswith('http'):
                print(f"‚úì URL valide: {url[:50]}...")
        print(f"‚úÖ {len(urls)} URLs de sources configur√©es")
        return True
    except Exception as e:
        print(f"‚ùå Erreur validation URLs: {e}")
        return False

def main():
    print("üß™ Test du collecteur de donn√©es InvestMTL")
    print("=" * 50)
    
    tests = [
        ("D√©pendances", test_dependencies),
        ("Setup r√©pertoires", test_setup),
        ("Validation URLs", test_download),
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\nüîç Test: {name}")
        success = test_func()
        results.append(success)
    
    print("\n" + "=" * 50)
    if all(results):
        print("‚úÖ Tous les tests passent ! Le script devrait fonctionner.")
        print("üí° Pour ex√©cuter la collecte compl√®te:")
        print("   python collect_areas_demography.py")
    else:
        print("‚ùå Certains tests √©chouent. V√©rifiez les d√©pendances.")
        failed_count = results.count(False)
        print(f"   {failed_count}/{len(results)} tests ont √©chou√©")

if __name__ == "__main__":
    main()
