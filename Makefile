# üè† InvestMTL Makefile
# Commandes rapides pour le d√©veloppement et le d√©ploiement

.PHONY: help install dev build deploy test clean setup

# Variables
API_DIR = api
FRONTEND_DIR = frontend
ETL_DIR = etl

# Commande par d√©faut
help: ## Affiche l'aide
	@echo "üè† InvestMTL - Commandes disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üöÄ Workflow recommand√©:"
	@echo "  make setup    # Configuration initiale"
	@echo "  make dev      # D√©veloppement local"  
	@echo "  make deploy   # D√©ploiement production"

# Configuration initiale
setup: ## Configuration compl√®te de l'environnement
	@echo "‚öôÔ∏è Configuration de InvestMTL..."
	@./deploy.sh setup || echo "Script deploy.sh introuvable, installation manuelle..."
	@echo "‚úÖ Configuration termin√©e!"

# Installation des d√©pendances
install: ## Installation de toutes les d√©pendances
	@echo "üì¶ Installation des d√©pendances..."
	@if [ -d "$(API_DIR)" ]; then cd $(API_DIR) && npm install; fi
	@if [ -d "$(FRONTEND_DIR)" ]; then cd $(FRONTEND_DIR) && npm install; fi
	@if [ -d "$(ETL_DIR)" ] && [ -f "$(ETL_DIR)/requirements.txt" ]; then \
		cd $(ETL_DIR) && \
		python3 -m venv .venv && \
		.venv/bin/pip install -r requirements.txt; \
	fi
	@echo "‚úÖ D√©pendances install√©es!"

# D√©veloppement local
dev: ## Lance l'environnement de d√©veloppement
	@echo "üõ†Ô∏è Lancement du d√©veloppement local..."
	@./dev.sh start

dev-stop: ## Arr√™te les services de d√©veloppement
	@./dev.sh stop

dev-status: ## Status des services de d√©veloppement  
	@./dev.sh status

dev-logs: ## Affiche les logs de d√©veloppement
	@./dev.sh logs

# Build
build: build-api build-frontend ## Build de tous les composants

build-api: ## Build de l'API
	@echo "üî® Build de l'API..."
	@if [ -d "$(API_DIR)" ]; then cd $(API_DIR) && npm run build 2>/dev/null || echo "Pas de script build pour l'API"; fi

build-frontend: ## Build du frontend
	@echo "üî® Build du frontend..."
	@if [ -d "$(FRONTEND_DIR)" ]; then cd $(FRONTEND_DIR) && npm run build; fi

# Tests
test: test-api test-frontend test-etl ## Lance tous les tests

test-api: ## Tests de l'API
	@echo "üß™ Tests API..."
	@if [ -d "$(API_DIR)" ]; then cd $(API_DIR) && npm test 2>/dev/null || echo "Pas de tests API configur√©s"; fi

test-frontend: ## Tests du frontend
	@echo "üß™ Tests Frontend..."
	@if [ -d "$(FRONTEND_DIR)" ]; then cd $(FRONTEND_DIR) && npm test 2>/dev/null || echo "Pas de tests Frontend configur√©s"; fi

test-etl: ## Tests ETL
	@echo "üß™ Tests ETL..."
	@if [ -d "$(ETL_DIR)/.venv" ]; then cd $(ETL_DIR) && .venv/bin/python -m pytest tests/ 2>/dev/null || echo "Pas de tests ETL configur√©s"; fi

# D√©ploiement
deploy: ## D√©ploiement complet sur Cloudflare
	@echo "üöÄ D√©ploiement InvestMTL..."
	@./deploy.sh

deploy-api: ## D√©ploiement de l'API uniquement
	@echo "üöÄ D√©ploiement API..."
	@if [ -d "$(API_DIR)" ]; then cd $(API_DIR) && npx wrangler deploy; fi

deploy-frontend: ## D√©ploiement du frontend uniquement
	@echo "üöÄ D√©ploiement Frontend..."
	@if [ -d "$(FRONTEND_DIR)" ]; then \
		cd $(FRONTEND_DIR) && \
		npm run build && \
		npx wrangler pages deploy dist --project-name investmtl; \
	fi

# ETL
etl-run: ## Lance le pipeline ETL
	@echo "üìä Ex√©cution du pipeline ETL..."
	@if [ -d "$(ETL_DIR)/.venv" ]; then \
		cd $(ETL_DIR) && \
		.venv/bin/python export_artifacts.py; \
	fi

etl-ingest: ## Ingestion des donn√©es uniquement
	@echo "üì• Ingestion des donn√©es..."
	@if [ -d "$(ETL_DIR)/.venv" ]; then \
		cd $(ETL_DIR) && \
		.venv/bin/python ingest_mtl.py && \
		.venv/bin/python ingest_statcan.py && \
		.venv/bin/python ingest_cmhc.py; \
	fi

# Database
db-init: ## Initialise la base de donn√©es D1
	@echo "üóÑÔ∏è Initialisation de la base de donn√©es..."
	@if [ -f "data_schema/d1_init.sql" ] && [ -d "$(API_DIR)" ]; then \
		cd $(API_DIR) && \
		npx wrangler d1 execute investmtl-db --file=../data_schema/d1_init.sql --remote; \
	fi

db-shell: ## Shell interactif D1
	@if [ -d "$(API_DIR)" ]; then cd $(API_DIR) && npx wrangler d1 execute investmtl-db --command=".help"; fi

# Nettoyage
clean: ## Nettoie les fichiers temporaires
	@echo "üßπ Nettoyage..."
	@rm -rf logs/
	@rm -rf .env.production
	@if [ -d "$(API_DIR)/node_modules" ]; then cd $(API_DIR) && rm -rf node_modules; fi
	@if [ -d "$(FRONTEND_DIR)/node_modules" ]; then cd $(FRONTEND_DIR) && rm -rf node_modules; fi
	@if [ -d "$(FRONTEND_DIR)/dist" ]; then cd $(FRONTEND_DIR) && rm -rf dist; fi
	@if [ -d "$(ETL_DIR)/.venv" ]; then rm -rf $(ETL_DIR)/.venv; fi
	@./dev.sh clean 2>/dev/null || true
	@echo "‚úÖ Nettoyage termin√©!"

clean-deps: clean install ## Nettoyage et r√©installation des d√©pendances

# Informations
info: ## Affiche les informations du projet
	@echo "üìã Informations InvestMTL:"
	@echo ""
	@echo "Structure du projet:"
	@find . -maxdepth 2 -type d -not -path '*/.*' | sort
	@echo ""
	@echo "Configuration Cloudflare:"
	@if [ -f ".env.production" ]; then \
		echo "  ‚úÖ Configuration trouv√©e dans .env.production"; \
		cat .env.production | grep -v TOKEN || true; \
	else \
		echo "  ‚ö†Ô∏è Pas de configuration trouv√©e"; \
	fi
	@echo ""
	@if command -v npx wrangler >/dev/null 2>&1; then \
		echo "Status Cloudflare:"; \
		npx wrangler whoami 2>/dev/null || echo "  ‚ö†Ô∏è Non connect√© √† Cloudflare"; \
	fi

# D√©veloppement rapide
quick-start: install dev ## Installation + d√©veloppement en une commande

# D√©ploiement rapide  
quick-deploy: build deploy ## Build + d√©ploiement en une commande

# Workflow complet
all: clean install test build deploy ## Workflow complet: clean + install + test + build + deploy
